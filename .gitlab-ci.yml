stages:
  - build_base
  - test
  - build_dev
  - build_prod
  - deploy_dev
  - deploy_prod
  - release

test:
  stage: test
  image: docker/compose:latest
  before_script:
    - docker login ${CI_REGISTRY} -u gitlab-ci-token -p ${CI_BUILD_TOKEN}
  variables:
    COMPOSE_INTERACTIVE_NO_CLI: 1
  script:
    - cp -vf .env.ci .env
    - docker-compose down
    - docker-compose build
    - docker-compose -f docker-compose.yml up -d
    - docker-compose up -d mail
    - sleep 10
    - docker-compose exec -T backend pytest -s -v --cov=app --cov-report=term-missing /app/app/tests
    - docker-compose exec -T frontend npm run test:coverage

  tags:
    - ns01

build_backend_base:
  stage: build_base
  image: docker:dind
  script:
    - docker login ${CI_REGISTRY} -u gitlab-ci-token -p ${CI_BUILD_TOKEN}
    - docker build -t ${CI_REGISTRY_IMAGE}:backend-base -f ./backend/Dockerfile.base ./backend
    - docker push ${CI_REGISTRY_IMAGE}:backend-base
  only:
    changes:
      - backend/Dockerfile.base
      - .gitlab-ci.yml
  tags:
    - ns01

build_frontend_dev:
  stage: build_dev
  image: docker:dind
  script:
    - docker login ${CI_REGISTRY} -u gitlab-ci-token -p ${CI_BUILD_TOKEN}
    - docker build -t ${CI_REGISTRY_IMAGE}:frontend-dev -f ./frontend/.docker/Dockerfile ./frontend
    - docker push ${CI_REGISTRY_IMAGE}:frontend-dev
  only:
    refs:
      - dev
    changes:
      - frontend/**/*
      - .gitlab-ci.yml
  tags:
    - ns01

build_backend_dev:
  stage: build_dev
  image: docker:dind
  script:
    - docker login ${CI_REGISTRY} -u gitlab-ci-token -p ${CI_BUILD_TOKEN}
    - docker build -t ${CI_REGISTRY_IMAGE}:backend-dev ./backend
    - docker push ${CI_REGISTRY_IMAGE}:backend-dev
  only:
    refs:
      - dev
    changes:
      - backend/**/*
      - .gitlab-ci.yml
  tags:
    - ns01

build_frontend_prod:
  stage: build_prod
  image: docker:dind
  script:
    - docker login ${CI_REGISTRY} -u gitlab-ci-token -p ${CI_BUILD_TOKEN}
    - docker build -t ${CI_REGISTRY_IMAGE}:frontend-prod -f ./frontend/.docker/Dockerfile ./frontend
    - docker push ${CI_REGISTRY_IMAGE}:frontend-prod
  only:
    refs:
      - master
    changes:
      - frontend/**/*
      - .gitlab-ci.yml
  tags:
    - ns01

build_backend_prod:
  stage: build_prod
  image: docker:dind
  script:
    - docker login ${CI_REGISTRY} -u gitlab-ci-token -p ${CI_BUILD_TOKEN}
    - docker build -t ${CI_REGISTRY_IMAGE}:backend-prod ./backend
    - docker push ${CI_REGISTRY_IMAGE}:backend-prod
  only:
    refs:
      - master
    changes:
      - backend/**/*
      - .gitlab-ci.yml
  tags:
    - ns01

deploy_dev:
  stage: deploy_dev
  image: cytopia/ansible:latest-tools
  script:
    - git clone https://${GL_USER}:${GL_TOKEN}@gitlab.com/natural-solutions/ns-ansible-infrastructure.git
    - cd ns-ansible-infrastructure
    - echo ${VAULT_PASSWORD_KEY} > password-file
    - ansible-vault decrypt --vault-password-file password-file k
    - ansible-playbook -i hosts -l ecoteka_dev --vault-password-file password-file deploy.yml
    - rm password-file
  only:
    - dev
  tags:
    - ns01
  variables:
    ANSIBLE_HOST_KEY_CHECKING: "false"
    ANSIBLE_INVENTORY_UNPARSED_FAILED: "true"

deploy_prod:
  stage: deploy_prod
  image: cytopia/ansible:latest-tools
  script:
    - git clone https://${GL_USER}:${GL_TOKEN}@gitlab.com/natural-solutions/ns-ansible-infrastructure.git
    - cd ns-ansible-infrastructure
    - echo ${VAULT_PASSWORD_KEY} > password-file
    - ansible-vault decrypt --vault-password-file password-file k
    - ansible-playbook -i hosts -l ecoteka_prod --vault-password-file password-file deploy.yml
    - rm password-file
  only:
    - master
  tags:
    - ns01
  variables:
    ANSIBLE_HOST_KEY_CHECKING: "false"
    ANSIBLE_INVENTORY_UNPARSED_FAILED: "true"

release:
  stage: release
  script:
    - npm i @semantic-release/gitlab @semantic-release/git @semantic-release/changelog @semantic-release/exec @semantic-release/release-notes-generator @semantic-release/commit-analyzer
    - npx semantic-release
  only:
    - master
  tags:
    - ns01
